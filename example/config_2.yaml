# Дополнительный пример, более сложная реализация

server:
  bind-address: "0.0.0.0:8053" 
  dns-forward: "1.1.1.1:53"
  http-server: "0.0.0.0:8081"

networks:
  # Можно указывать много диапазонов
  ipv4:
    cidr: "10.199.0.0/24"
  ipv4_special:
    cidr: "10.199.1.0/24"
  ipv6:
    cidr: "fd00::/117" 

# Действия
actions:
  PROXY:
    mark: "PROXY"
    dns-forward: "1.1.1.1:53"
    ipv4-lists:
      - "ipv4"
    ipv6-lists:
      - "ipv6"
    ipv4-run-add: "sh sh/iptables/ipv4_create_rule.sh {ipv40} {realIP} {mark}"
    ipv4-run-delete: "sh sh/iptables/ipv4_remove_rule.sh {ipv40} {realIP} {mark}"
    ipv4-run-reset: "sh sh/iptables/ipv4_reset_all_rules.sh {mark}"
    ipv6-run-add: "sh sh/iptables/ipv6_create_rule.sh {ipv60} {realIP} {mark}"
    ipv6-run-delete: "sh sh/iptables/ipv6_remove_rule.sh {ipv60} {realIP} {mark}"
    ipv6-run-reset: "sh sh/iptables/ipv6_reset_all_rules.sh {mark}"
  # Можно указывать несколько действий
  # в rules можно воспользоваться им указав как 3-я опция: DOMAIN-SUFFIX,instagram.com,PROXYTTL
  PROXYTTL:
    mark: "PROXYTTL"
    dns-forward: "8.8.8.8:53"
    # ttl-rewrite - минимальное значение ttl которое будет устанавливаться для возвращаемой записи
    # Если TTL у записи меньше указанного значения, то будет установлено то которое указано
    # Полезная опция для ресурсов типа instagram которые любят кидать DNS ответы 17-30 секунд
    ttl-rewrite: 60
    ipv4-lists:
      - "ipv4"
    ipv6-lists:
      - "ipv6"
    ipv4-run-add: "sh sh/iptables/ipv4_create_rule.sh {ipv40} {realIP} {mark}"
    ipv4-run-delete: "sh sh/iptables/ipv4_remove_rule.sh {ipv40} {realIP} {mark}"
    ipv4-run-reset: "sh sh/iptables/ipv4_reset_all_rules.sh {mark}"
    ipv6-run-add: "sh sh/iptables/ipv6_create_rule.sh {ipv60} {realIP} {mark}"
    ipv6-run-delete: "sh sh/iptables/ipv6_remove_rule.sh {ipv60} {realIP} {mark}"
    ipv6-run-reset: "sh sh/iptables/ipv6_reset_all_rules.sh {mark}"
  PROXYSPECIAL:
    mark: "PROXYSPECIAL"
    dns-forward: "8.8.8.8:53"
    # ttl-rewrite - минимальное значение ttl которое будет устанавливаться для возвращаемой записи
    # Если TTL у записи меньше указанного значения, то будет установлено то которое указано
    # Полезная опция для ресурсов типа instagram которые любят кидать DNS ответы 17-30 секунд
    # или прописать выделенные домена на более длительный период
    ttl-rewrite: 60
    ipv4-lists:
      - "ipv4"
      - "ipv4_special"
    ipv6-lists:
      - "ipv6"
    # Вызов сразу нескольких диапазонов newtwork
    # Обращение в ipv*-run-add/delete/reset по маске 
    # {ipv40} - ipv4
    # {ipv41} - ipv4_special
    # и т.д. Тоже самое будет работать с ipv6. Полезно в случае если надо выделить к примеру случайный ipv4/ipv6 адрес как исходящий
    # если у вас есть целая подсеть. Требуется переписать скрипты SH согласно вашим задачам
    ipv4-run-add: "sh sh/iptables/ipv4_create_rule.sh {ipv40} {realIP} {mark}"
    ipv4-run-delete: "sh sh/iptables/ipv4_remove_rule.sh {ipv40} {realIP} {mark}"
    ipv4-run-reset: "sh sh/iptables/ipv4_reset_all_rules.sh {mark}"
    ipv6-run-add: "sh sh/iptables/ipv6_create_rule.sh {ipv60} {realIP} {mark}"
    ipv6-run-delete: "sh sh/iptables/ipv6_remove_rule.sh {ipv60} {realIP} {mark}"
    ipv6-run-reset: "sh sh/iptables/ipv6_reset_all_rules.sh {mark}"